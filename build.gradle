// Credits to CrazyPants (EnderIO) for this gradle buildscript! :)
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge' // adds the forge dependency

ext.configFile = file "build.properties"  // loads the properties file as configFile

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
    // enables access to the fields in properties as config.[property]
}

version = config.mod_version
group = "eu.teslacraft"
archivesBaseName = "TeslaCraft"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version

    replace '@VERSION@', project.version
}

dependencies {
    //  compile "codechicken:CodeChickenLib:1.7.2-1.1.1.81:dev"
    //  compile "codechicken:ForgeMultipart:1.7.2-1.1.0.282:dev"
    // compile 'com.mod-buildcraft:buildcraft:6.0.16:dev'
}

// configure the source folders
sourceSets {
    main {
        java {
            srcDir 'src/java'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
        resources {
            srcDir 'src/resources'
            // exclude 'some exclusion'
            // include 'some inclusion'
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        // ${version} and ${mcversion} are the exact strings being replaced
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
}

// deobf jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// make sure all of these happen when we run build
build.dependsOn sourceJar, deobfJar